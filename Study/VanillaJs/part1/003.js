console.log('vs code run!')
var a = 5;
var b = 2;
console.log( a + b )

/*
 ㅇ변수 할당문이 나옴.
 변수영역 과 데이터 영역으로 나눠서 메모리를 관리하고, 인다이렉트 방식으로 구현 됨

ㅇvariable vs constant
-> 변수 영역 메모리에서 한번 할당이 이뤄 졌을때 재할당 가능한지 여부 가 변수 상수 구분점.

ㅇimmutable
->데이터 영역에서 불변성은 데이터 영역에서 리터럴 풀링이 일어나, 메모리를 효율적으로 쓰려고 함.
따라서 이 불변성은 한번 데이터를 할당하고, 수정은 재할당으로만 이루어짐. 
가비지 컬렉팅 당하지 않는한 한번만들어진 값은 영원히 변하지 않음.
?? -> 삭제는 어떻게 이루어지나? 아에 삭제란 방식이 가비지 컬렉터에게 맞겨 버리는 것인가?

 ㅇ코드에서 봤을떄 리터럴 들이 ex)3,5,"text", 데이터 영역에 저장이 되고, 프로그램 흐름에서 
 사용될 경우에 먼저 서칭 후 없을때 메모리를 할당함.또한 concat연산시 그 스트링이 들어가 있는 메모리를 수정하는 것이아니라
 재할당이 일남. 대부분 재할당이 일어난다고 생각하는중.또한 먼저 서칭을 무조건 하는 것 같음

 ㅇ레퍼런스 타입은 가변/불변 두가지 상태를 옵션(?)으로 선택 할 수 있다.
 ㅇ프리미티브 타입은 불변성을 가진다.

 *내가 보기엔 둘다 참조방식(cpp) 인데 자바스크립트에선 나눠 놓음. 기본형 참조형 모두
 주소를 복제하나, 하나는 값이 담긴 주솟값을 바로복제 / primitive - 이건 그냥 주소 복사.
 하나는 값이담긴 주소값들로 이루어진 묶음을 가리키는 주소를 복제 / reference - 배열이름 역활을 한다고 이해
?? 컴퓨터에서 복제는 얕은 복사와 깊은 복사가 있을 건데, 그 방식이 다음 주제가 될 것 같음.
*/ 