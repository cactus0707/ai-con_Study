/**
 * 화살표 함수 +> 
 * 음.. c++의 람다식 같은 느낌이다.
 */
const double = x => x+x; // 함수 표현식 방법 이라고 이해하면 될 듯. double 이라서 타입인 줄 햇갈리지 말 것.
console.log(double(2));

const add = (a,b) => a + b; // 두 매개변수를 받는 화살표 함수, 한줄 이므로 딱히 리턴이 없어도 a+b값이 리턴됨.
console.log(add(1,2));

const printArguments = () =>{ // 아무런 매개변수를 정의 하지 않았기 때문에, () <- 방식으로 씀.
    console.log(arguments);
}
printArguments(1, 2, 3); // 이때 에러를 뿜음. 이유는 일반 함수와 다르게 화살표 함수는 아규먼트 객체가 없기 때문임 

//?? 아규먼트 객체 더 찾아 볼 것/

const sum = (...args) => {
    let total = 0;
    for (let i =0; i < args.length; i++){
        total += args[i];
    }
    return total;
}
console.log(sum(1, 2, 3)); // 나머지 매개변수연산자를 이용해서 합을 구함..

setTimeout(()=>{ // 화살표 함수또한 인자로 전달 가능.
    console.log('화살표 함수!');
}, 10); // 셋타임아웃?? sleep같은 건가?
// 대부분 람다식이랑 비슷한 것 같음.
/**
 * 매개변수가 하나일 경우에는 인자를 정의할 떄 괄호를 생략할 수 있음.
 * 매개변수가 없거나 둘 이상일 경우 괄호를 작성해야함.
 * 화살표 함수 코드 블록을 지정하지 않고 한문장으로 작성시 -> 리턴문 사용하지 않아도 화살표 오른쪽 표현식의 계산 결과값이 반환됨.(짧은것들은 이렇게 써도 될듯)
 * 화살표 함수 코드 블록을 지정했을 경우 반환하고자 하는 값에 리턴문을 작성해야함. 리턴문 없으면 언디파인드 반환함.
 * 
 */